{"version":3,"sources":["compoents/Conversation.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","width","margin","maxWidth","heading","fontSize","typography","pxToRem","fontWeight","fontWeightBold","fontFamily","SimpleAccordion","id","question","answer","image","classes","useState","expanded","setExpanded","className","Accordion","onClick","console","log","AccordionSummary","expandIcon","aria-controls","Typography","AccordionDetails","src","style","height","alt","Conversation","display","flexDirection","alignItems","padding","backgroundColor","convo","map","_question","App","show","setShow","currentQuestion","setCurrentQuestion","handleClose","alanBtnInstance","useRef","useEffect","current","alanBtn","key","onCommand","commandData","i","questions","length","tempArr","push","showModal","qId","Modal","size","onHide","backdrop","keyboard","Header","closeButton","Title","Body","Footer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.071f343b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport convo from \"./question.json\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"70%\",\r\n    margin: \"10px\",\r\n    maxWidth: \"600px\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightBold,\r\n    fontFamily: \"Helvetica\",\r\n  },\r\n}));\r\n\r\nfunction SimpleAccordion({ id, question, answer, image }) {\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = useState(false);\r\n\r\n  return (\r\n    <div key={id} className={classes.root}>\r\n      <Accordion\r\n        expanded={expanded}\r\n        onClick={() => {\r\n          console.log(image);\r\n          setExpanded(!expanded);\r\n        }}\r\n      >\r\n        <AccordionSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\"\r\n        >\r\n          <Typography className={classes.heading}>{question}</Typography>\r\n        </AccordionSummary>\r\n        <AccordionDetails>\r\n          <Typography>{answer}</Typography>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n      {expanded && (\r\n        <img\r\n          src={image}\r\n          style={{\r\n            width: \"600px\",\r\n            height: \"350px\",\r\n          }}\r\n          alt=\"\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\nfunction Conversation() {\r\n  return (\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n\r\n        padding: \"40px\",\r\n        backgroundColor: \"#020120\",\r\n        height: \"100%\",\r\n      }}\r\n    >\r\n      {convo.map((_question) => (\r\n        <>\r\n          <SimpleAccordion\r\n            id={_question.id}\r\n            question={_question.question}\r\n            answer={_question.answer}\r\n            image={_question.image}\r\n          />\r\n        </>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Conversation;\r\n","import \"./App.css\";\r\nimport alanBtn from \"@alan-ai/alan-sdk-web\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { scroller } from \"react-scroller\";\r\nimport Conversation from \"./compoents/Conversation\";\r\nimport questions from \"./compoents/question.json\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport \"./App.css\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nfunction App() {\r\n  const [show, setShow] = useState(false);\r\n  const [currentQuestion, setCurrentQuestion] = useState([]);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  function showModal(id) {\r\n    // Implement\r\n    console.log();\r\n    // check if the id is in the questions array\r\n    // if it is, set the state to true\r\n    // if it is not, set the state to false\r\n    // if the state is true, show the modal\r\n    // if the state is false, hide the modal\r\n    for (let i = 0; i < questions.length; i++) {\r\n      if (questions[i].id === id) {\r\n        // console.log(\"found\");\r\n        // console.log(questions[i]);\r\n        let tempArr = [];\r\n        tempArr.push(questions[i]);\r\n\r\n        setCurrentQuestion(tempArr);\r\n        handleShow();\r\n        return;\r\n      }\r\n    }\r\n    handleClose();\r\n  }\r\n  const alanBtnInstance = useRef(null);\r\n  useEffect(() => {\r\n    if (!alanBtnInstance.current) {\r\n      alanBtnInstance.current = alanBtn({\r\n        key: \"bb98a15b1e4868b02c31b391c6de2f392e956eca572e1d8b807a3e2338fdd0dc/stage\",\r\n        onCommand: (commandData) => {\r\n          showModal(commandData.qId);\r\n          // console.log(commandData.qId);\r\n          // console.log(commandData);\r\n        },\r\n      });\r\n    }\r\n  }, []);\r\n  return (\r\n    <div className=\"App\">\r\n      {/* make a button that calls showmodal\r\n       */}\r\n      {/* <Button variant=\"primary\" onClick={() => showModal(4)}>\r\n        Hey\r\n      </Button> */}\r\n      <Modal\r\n        size=\"lg\"\r\n        show={show}\r\n        onHide={handleClose}\r\n        backdrop=\"static\"\r\n        keyboard={true}\r\n      >\r\n        {currentQuestion.length > 0 ? (\r\n          <>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>{currentQuestion[0].question}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              {/* align the photo to the middle of the div\r\n               */}\r\n              <div className=\"align-mid\">\r\n                <img\r\n                  width={650}\r\n                  height={369}\r\n                  src={currentQuestion[0].image}\r\n                  alt=\"answer\"\r\n                />\r\n              </div>\r\n              <p>{currentQuestion[0].answer}</p>\r\n            </Modal.Body>\r\n            <Modal.Footer></Modal.Footer>\r\n          </>\r\n        ) : null}\r\n      </Modal>\r\n\r\n      <Conversation />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}